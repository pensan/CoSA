<?php
namespace TYPO3\FLOW3\Security;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\FLOW3\Annotations as FLOW3;

	/**
	 * Autogenerated Proxy Class
	 * @TYPO3\FLOW3\Annotations\Scope("session")
	 */
class Context extends Context_Original implements \TYPO3\FLOW3\Object\Proxy\ProxyInterface {

	private $FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices = array();

	private $FLOW3_AOP_Proxy_groupedAdviceChains = array();

	private $FLOW3_AOP_Proxy_methodIsInAdviceMode = array();


	/**
	 * Autogenerated Proxy Method
	 */
	public function __construct() {

		$this->FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray();
		if (get_class($this) === 'TYPO3\FLOW3\Security\Context') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Context', $this);
		$this->FLOW3_Proxy_injectProperties();

		\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->registerShutdownObject($this, 'shutdownObject');
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 protected function FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray() {
		if (method_exists(get_parent_class($this), 'FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray')) parent::FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray();

		$objectManager = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager;
		$this->FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices = array(
			'initialize' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'isInitialized' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getAuthenticationStrategy' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getAuthenticationTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getAuthenticationTokensOfType' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getRoles' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'hasRole' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getParty' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getPartyByType' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getAccount' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getAccountByAuthenticationProviderName' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getCsrfProtectionToken' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'hasCsrfProtectionTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'isCsrfProtectionTokenValid' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'setInterceptedRequest' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'getInterceptedRequest' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'clearContext' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'separateActiveAndInactiveTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'mergeTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'updateTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
			'refreshTokens' => array(
				'TYPO3\FLOW3\AOP\Advice\AroundAdvice' => array(
					new \TYPO3\FLOW3\AOP\Advice\AroundAdvice('TYPO3\FLOW3\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
				),
			),
		);
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

		$this->FLOW3_AOP_Proxy_buildMethodsAndAdvicesArray();
		if (get_class($this) === 'TYPO3\FLOW3\Security\Context') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Context', $this);

	if (property_exists($this, 'FLOW3_Persistence_RelatedEntities') && is_array($this->FLOW3_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface');
		foreach ($this->FLOW3_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\FLOW3\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->FLOW3_Persistence_RelatedEntities);
	}
				$this->FLOW3_Proxy_injectProperties();
		$result = NULL;
		if (method_exists(get_parent_class($this), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();

		\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->registerShutdownObject($this, 'shutdownObject');
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function FLOW3_AOP_Proxy_getAdviceChains($methodName) {
		$adviceChains = array();
		if (isset($this->FLOW3_AOP_Proxy_groupedAdviceChains[$methodName])) {
			$adviceChains = $this->FLOW3_AOP_Proxy_groupedAdviceChains[$methodName];
		} else {
			if (isset($this->FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices[$methodName])) {
				$groupedAdvices = $this->FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices[$methodName];
				if (isset($groupedAdvices['TYPO3\FLOW3\AOP\Advice\AroundAdvice'])) {
					$this->FLOW3_AOP_Proxy_groupedAdviceChains[$methodName]['TYPO3\FLOW3\AOP\Advice\AroundAdvice'] = new \TYPO3\FLOW3\AOP\Advice\AdviceChain($groupedAdvices['TYPO3\FLOW3\AOP\Advice\AroundAdvice'], $this);
					$adviceChains = $this->FLOW3_AOP_Proxy_groupedAdviceChains[$methodName];
				}
			}
		}
		return $adviceChains;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function FLOW3_AOP_Proxy_invokeJoinPoint(\TYPO3\FLOW3\AOP\JoinPointInterface $joinPoint) {
		if (__CLASS__ !== $joinPoint->getClassName()) return parent::FLOW3_AOP_Proxy_invokeJoinPoint($joinPoint);
		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode[$joinPoint->getMethodName()])) {
			return call_user_func_array(array('self', $joinPoint->getMethodName()), $joinPoint->getMethodArguments());
		}
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 */
	 public function initialize() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['initialize'])) {
		$result = parent::initialize();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['initialize'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('initialize');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'initialize', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['initialize']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['initialize']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return boolean TRUE if the Context is initialized, FALSE otherwise.
	 */
	 public function isInitialized() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isInitialized'])) {
		$result = parent::isInitialized();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isInitialized'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('isInitialized');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'isInitialized', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isInitialized']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isInitialized']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return int One of the AUTHENTICATE_* constants
	 */
	 public function getAuthenticationStrategy() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationStrategy'])) {
		$result = parent::getAuthenticationStrategy();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationStrategy'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getAuthenticationStrategy');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getAuthenticationStrategy', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationStrategy']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationStrategy']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return array Array of set \TYPO3\FLOW3\Authentication\Token objects
	 */
	 public function getAuthenticationTokens() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokens'])) {
		$result = parent::getAuthenticationTokens();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokens'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getAuthenticationTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getAuthenticationTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param string $className The class name
	 * @return array Array of set \TYPO3\FLOW3\Authentication\Token objects
	 */
	 public function getAuthenticationTokensOfType($className) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokensOfType'])) {
		$result = parent::getAuthenticationTokensOfType($className);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokensOfType'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['className'] = $className;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getAuthenticationTokensOfType');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getAuthenticationTokensOfType', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokensOfType']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAuthenticationTokensOfType']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return array Array of TYPO3\FLOW3\Security\Policy\Role objects
	 */
	 public function getRoles() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getRoles'])) {
		$result = parent::getRoles();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getRoles'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getRoles');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getRoles', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getRoles']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getRoles']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param string $role The string representation of the role to search for
	 * @return boolean TRUE, if a role with the given string representation was found
	 */
	 public function hasRole($role) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasRole'])) {
		$result = parent::hasRole($role);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasRole'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['role'] = $role;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('hasRole');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'hasRole', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasRole']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasRole']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return \TYPO3\Party\Domain\Model\AbstractParty The authenticated party
	 */
	 public function getParty() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getParty'])) {
		$result = parent::getParty();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getParty'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getParty');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getParty', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getParty']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getParty']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param string $className Class name of the party to find
	 * @return \TYPO3\Party\Domain\Model\AbstractParty The authenticated party
	 */
	 public function getPartyByType($className) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getPartyByType'])) {
		$result = parent::getPartyByType($className);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getPartyByType'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['className'] = $className;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getPartyByType');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getPartyByType', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getPartyByType']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getPartyByType']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return \TYPO3\FLOW3\Security\Account The authenticated account
	 */
	 public function getAccount() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccount'])) {
		$result = parent::getAccount();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccount'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getAccount');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getAccount', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccount']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccount']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param string $authenticationProviderName Authentication provider name of the account to find
	 * @return \TYPO3\FLOW3\Security\Account The authenticated account
	 */
	 public function getAccountByAuthenticationProviderName($authenticationProviderName) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccountByAuthenticationProviderName'])) {
		$result = parent::getAccountByAuthenticationProviderName($authenticationProviderName);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccountByAuthenticationProviderName'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['authenticationProviderName'] = $authenticationProviderName;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getAccountByAuthenticationProviderName');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getAccountByAuthenticationProviderName', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccountByAuthenticationProviderName']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getAccountByAuthenticationProviderName']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return string
	 */
	 public function getCsrfProtectionToken() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getCsrfProtectionToken'])) {
		$result = parent::getCsrfProtectionToken();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getCsrfProtectionToken'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getCsrfProtectionToken');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getCsrfProtectionToken', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getCsrfProtectionToken']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getCsrfProtectionToken']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return boolean TRUE, if the token is valid. FALSE otherwise.
	 */
	 public function hasCsrfProtectionTokens() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasCsrfProtectionTokens'])) {
		$result = parent::hasCsrfProtectionTokens();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasCsrfProtectionTokens'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('hasCsrfProtectionTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'hasCsrfProtectionTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasCsrfProtectionTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['hasCsrfProtectionTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param string $token The token string to be validated
	 * @return boolean TRUE, if the token is valid. FALSE otherwise.
	 */
	 public function isCsrfProtectionTokenValid($csrfToken) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isCsrfProtectionTokenValid'])) {
		$result = parent::isCsrfProtectionTokenValid($csrfToken);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isCsrfProtectionTokenValid'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['csrfToken'] = $csrfToken;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('isCsrfProtectionTokenValid');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'isCsrfProtectionTokenValid', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isCsrfProtectionTokenValid']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['isCsrfProtectionTokenValid']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param \TYPO3\FLOW3\MVC\RequestInterface $interceptedRequest
	 * @return void
	 */
	 public function setInterceptedRequest(\TYPO3\FLOW3\MVC\RequestInterface $interceptedRequest = NULL) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['setInterceptedRequest'])) {
		$result = parent::setInterceptedRequest($interceptedRequest);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['setInterceptedRequest'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['interceptedRequest'] = $interceptedRequest;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('setInterceptedRequest');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'setInterceptedRequest', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['setInterceptedRequest']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['setInterceptedRequest']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return \TYPO3\FLOW3\MVC\RequestInterface
	 */
	 public function getInterceptedRequest() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getInterceptedRequest'])) {
		$result = parent::getInterceptedRequest();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getInterceptedRequest'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('getInterceptedRequest');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'getInterceptedRequest', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getInterceptedRequest']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['getInterceptedRequest']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 */
	 public function clearContext() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['clearContext'])) {
		$result = parent::clearContext();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['clearContext'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('clearContext');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'clearContext', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['clearContext']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['clearContext']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 */
	 protected function separateActiveAndInactiveTokens() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['separateActiveAndInactiveTokens'])) {
		$result = parent::separateActiveAndInactiveTokens();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['separateActiveAndInactiveTokens'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('separateActiveAndInactiveTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'separateActiveAndInactiveTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['separateActiveAndInactiveTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['separateActiveAndInactiveTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param array $managerTokens Array of tokens provided by the authentication manager
	 * @param array $sessionTokens Array of tokens resotored from the session
	 * @return array Array of \TYPO3\FLOW3\Security\Authentication\TokenInterface objects
	 */
	 protected function mergeTokens($managerTokens, $sessionTokens) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['mergeTokens'])) {
		$result = parent::mergeTokens($managerTokens, $sessionTokens);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['mergeTokens'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['managerTokens'] = $managerTokens;
				$methodArguments['sessionTokens'] = $sessionTokens;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('mergeTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'mergeTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['mergeTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['mergeTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param array $tokens Array of authentication tokens the credentials should be updated for
	 * @return void
	 */
	 protected function updateTokens(array $tokens) {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['updateTokens'])) {
		$result = parent::updateTokens($tokens);

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['updateTokens'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['tokens'] = $tokens;
			
					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('updateTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'updateTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['updateTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['updateTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 */
	 public function refreshTokens() {

		if (isset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['refreshTokens'])) {
		$result = parent::refreshTokens();

		} else {
			$this->FLOW3_AOP_Proxy_methodIsInAdviceMode['refreshTokens'] = TRUE;
			try {
			
					$methodArguments = array();

					$adviceChains = $this->FLOW3_AOP_Proxy_getAdviceChains('refreshTokens');
					$adviceChain = $adviceChains['TYPO3\FLOW3\AOP\Advice\AroundAdvice'];
					$adviceChain->rewind();
					$result = $adviceChain->proceed(new \TYPO3\FLOW3\AOP\JoinPoint($this, 'TYPO3\FLOW3\Security\Context', 'refreshTokens', $methodArguments, $adviceChain));

			} catch(\Exception $e) {
				unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['refreshTokens']);
				throw $e;
			}
			unset($this->FLOW3_AOP_Proxy_methodIsInAdviceMode['refreshTokens']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->FLOW3_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('TYPO3\FLOW3\Security\Context');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('FLOW3_AOP_Proxy_targetMethodsAndGroupedAdvices', 'FLOW3_AOP_Proxy_groupedAdviceChains', 'FLOW3_AOP_Proxy_methodIsInAdviceMode'))) continue;
		if ($reflectionService->isPropertyTaggedWith('TYPO3\FLOW3\Security\Context', $propertyName, 'transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			foreach($this->$propertyName as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$className = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
			}
			if ($this->$propertyName instanceof \TYPO3\FLOW3\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'FLOW3_Persistence_RelatedEntities') || !is_array($this->FLOW3_Persistence_RelatedEntities)) {
					$this->FLOW3_Persistence_RelatedEntities = array();
					$this->FLOW3_Object_PropertiesToSerialize[] = 'FLOW3_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\FLOW3\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->FLOW3_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\FLOW3\Object\Configuration\Configuration::SCOPE_SINGLETON) {
				continue;
			}
		}
		$this->FLOW3_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->FLOW3_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\FLOW3\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'FLOW3_Persistence_RelatedEntities') || !is_array($this->FLOW3_Persistence_RelatedEntities)) {
				$this->FLOW3_Persistence_RelatedEntities = array();
				$this->FLOW3_Object_PropertiesToSerialize[] = 'FLOW3_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\FLOW3\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->FLOW3_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\FLOW3\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function FLOW3_Proxy_injectProperties() {
		$this->injectAuthenticationManager(\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Security\Authentication\AuthenticationManagerInterface'));
		$this->injectSettings(\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Configuration\ConfigurationManager')->getConfiguration(\TYPO3\FLOW3\Configuration\ConfigurationManager::CONFIGURATION_TYPE_SETTINGS, 'TYPO3.FLOW3'));
		$this->policyService = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Security\Policy\PolicyService');
		$this->hashService = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Security\Cryptography\HashService');
		$this->requestHandlerResolver = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\MVC\RequestHandlerResolver');
	}
}
#0             %CLASS%TYPO3_FLOW3_Security_Context37348     